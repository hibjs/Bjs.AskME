// <auto-generated />
using AskME.Core.Entities.Enum;
using AskME.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace AskME.Infrastructure.Migrations
{
    [DbContext(typeof(AskMEDbContext))]
    [Migration("20180415140719_20180415_V2")]
    partial class _20180415_V2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AskME.Core.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Adoption");

                    b.Property<bool>("Anonymous");

                    b.Property<string>("AnserContent");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime>("SubTime");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("AskME.Core.Entities.Commont", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerId");

                    b.Property<string>("Content");

                    b.Property<DateTime>("SubTime");

                    b.Property<int?>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Commont");
                });

            modelBuilder.Entity("AskME.Core.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Anonymous");

                    b.Property<string>("Description");

                    b.Property<DateTime>("SubTime");

                    b.Property<string>("Title")
                        .HasMaxLength(64);

                    b.Property<int>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("AskME.Core.Entities.QuestionTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("QuestionId");

                    b.Property<int>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TagId");

                    b.ToTable("QuestionTags");
                });

            modelBuilder.Entity("AskME.Core.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("Disabled");

                    b.Property<DateTime>("SubTime");

                    b.Property<string>("TagName")
                        .HasMaxLength(64);

                    b.Property<int>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("AskME.Core.Entities.TagFollower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("SubTime");

                    b.Property<int>("TagId");

                    b.Property<int?>("UserInfoId");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("TagFollower");
                });

            modelBuilder.Entity("AskME.Core.Entities.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateTime");

                    b.Property<string>("Email")
                        .HasMaxLength(64);

                    b.Property<bool>("EmailValidated");

                    b.Property<string>("Icon")
                        .HasMaxLength(128);

                    b.Property<string>("Password")
                        .HasMaxLength(32);

                    b.Property<string>("QQ")
                        .HasMaxLength(32);

                    b.Property<string>("TelNumber")
                        .HasMaxLength(11);

                    b.Property<string>("UId")
                        .HasMaxLength(32);

                    b.Property<string>("UserName")
                        .HasMaxLength(32);

                    b.Property<string>("WeChat")
                        .HasMaxLength(32);

                    b.HasKey("Id");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("AskME.Core.Entities.Answer", b =>
                {
                    b.HasOne("AskME.Core.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AskME.Core.Entities.Commont", b =>
                {
                    b.HasOne("AskME.Core.Entities.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AskME.Core.Entities.UserInfo")
                        .WithMany("Commonts")
                        .HasForeignKey("UserInfoId");
                });

            modelBuilder.Entity("AskME.Core.Entities.Question", b =>
                {
                    b.HasOne("AskME.Core.Entities.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AskME.Core.Entities.QuestionTags", b =>
                {
                    b.HasOne("AskME.Core.Entities.Question")
                        .WithMany("QuestionTags")
                        .HasForeignKey("QuestionId");

                    b.HasOne("AskME.Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AskME.Core.Entities.Tag", b =>
                {
                    b.HasOne("AskME.Core.Entities.UserInfo", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AskME.Core.Entities.TagFollower", b =>
                {
                    b.HasOne("AskME.Core.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AskME.Core.Entities.UserInfo")
                        .WithMany("TagFollowers")
                        .HasForeignKey("UserInfoId");
                });
#pragma warning restore 612, 618
        }
    }
}
